## Create a gocd role

```shell
$ curl 'https://ci.example.com/go/api/admin/security/roles' \
      -u 'username:password' \
      -H 'Accept: <%= data.apis.versions.roles %>' \
      -H 'Content-Type: application/json' \
      -X POST -d '{
         "name": "new-role",
         "type": "gocd",
         "attributes" : {
          "users": ["bob"]
         }
        }'
```

> The above command returns JSON structured like this:

```http
HTTP/1.1 200 OK
Content-Type: <%= data.apis.versions.roles %>; charset=utf-8
ETag: "cbc5f2d5b9c13a2cc1b1efb3d8a6155d"
```

```json
{
  "_links": {
    "self": {
      "href": "https://ci.example.com/go/api/admin/security/roles/new-role"
    },
    "doc": {
      "href": "https://api.gocd.org/#roles"
    },
    "find": {
      "href": "https://ci.example.com/go/api/admin/security/roles/:role_name"
    }
  },
  "name": "new-role",
  "type": "gocd",
  "attributes": {
    "users": ["bob"]
  }
}
```

Create a gocd role. A gocd role is a group of users having same permissions in GoCD.

<%= available_since('17.5.0') %>

<p class='http-request-heading'>HTTP Request</p>

`POST /go/api/admin/security/roles`

<p class='http-request-return-description'>Returns</p>

The [role object](#the-role-object).


## Create a plugin role

```shell
$ curl 'https://ci.example.com/go/api/admin/security/roles' \
      -u 'username:password' \
      -H 'Accept: <%= data.apis.versions.roles %>' \
      -H 'Content-Type: application/json' \
      -X POST -d '{
        "name": "new-plugin-role",
        "type": "plugin",
        "attributes": {
          "auth_config_id": "ldap",
          "properties": [
            {
              "key": "UserGroupMembershipAttribute",
              "value": "memberOf"
            },
            {
              "key": "GroupIdentifiers",
              "value": "ou=devs,ou=groups,ou=system,dc=example,dc=com"
            }
          ]
        }
      }'
```

> The above command returns JSON structured like this:

```http
HTTP/1.1 200 OK
Content-Type: <%= data.apis.versions.roles %>; charset=utf-8
ETag: "cbc5f2d5b9c13a2cc1b1efb3d8a6155d"
```

```json
{
  "_links": {
    "self": {
      "href": "https://ci.example.com/go/api/admin/security/roles/blackbird1"
    },
    "doc": {
      "href": "https://api.gocd.org/#roles"
    },
    "find": {
      "href": "https://ci.example.com/go/api/admin/security/roles/:role_name"
    }
  },
  "name": "blackbird1",
  "type": "plugin",
  "attributes": {
    "auth_config_id": "ldap",
    "properties": [
      {
        "key": "UserGroupMembershipAttribute",
        "value": "memberOf"
      },
      {
        "key": "GroupIdentifiers",
        "value": "ou=admins,ou=groups,ou=system,dc=example,dc=com"
      }
    ]
  }
}
```

Plugin role is used to authorize user against external authorization server using authorization plugin.

Prerequisite to create plugin role,

1. Install authorization plugin with `can_authorize` [capability](https://plugin-api.gocd.org/current/authorization/#get-plugin-capabilities).
2. Create [authorization configuration](#authorization-configuration).

<%= available_since('17.5.0') %>

<p class='http-request-heading'>HTTP Request</p>

`POST /go/api/admin/security/roles`

<p class='http-request-return-description'>Returns</p>

The [role object](#the-role-object).
